* Variables
** About me
#+BEGIN_SRC emacs-lisp
   (setq user-full-name    "Felix Brendel"
         user-mail-address "felix@brendel.engineering")
#+END_SRC

** System dependent
** build script name
#+begin_src emacs-lisp
  (if (string= system-type "windows-nt")
    (setq build-script-name "build.bat")
   (setq build-script-name "build.sh")
  )
#+end_src

#+RESULTS:
: build.bat

*** Ghostscript
  #+BEGIN_SRC emacs-lisp
    (setq doc-view-ghostscript-program "D:/Programme/gohstscript/gs9.18/bin/gswin32.exe")
  #+END_SRC
*** Go
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'exec-path "D:/Daten/Coding/Go/Library/bin/")
  #+END_SRC
*** Korean font
#+BEGIN_SRC elisp
(set-fontset-font "fontset-default" 'hangul
                      '("Gulim"))
#+END_SRC
*** Reveal js
#+BEGIN_SRC emacs-lisp
(setq org-reveal-root "file:///d:/Programme/revealjs/reveal.js-3.6.0/")
#+END_SRC

** regex searching todos
#+BEGIN_SRC emacs-lisp
    (setq find-todo-regex "\\b((TODO)|(NOTE)|(QUESTION)|(HACK)|(BUG))")
#+END_SRC

* Utf-8 everywhere
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+END_SRC

* Packages
** Package config
  #+begin_src emacs-lisp
    (require 'package)
    (load-library "url-handlers")

    (add-to-list
     'package-archives
     '("melpa" . "http://melpa.org/packages/"))

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+end_src

** academic phrases
#+begin_src emacs-lisp
  (use-package academic-phrases
    :ensure t
   )
#+end_src

** company-childframe
#+begin_src emacs-lisp
  (use-package company-childframe
    :ensure t
    :config
      (setcar (cdr (assq 'company-childframe-mode minor-mode-alist)) "")
       (company-childframe-mode 1))
#+end_src
** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company :ensure t
    :config
    (setq company-dabbrev-downcase nil)
    (setq-default company-lighter-base "(C)")
    (setq-default company-show-numbers          1)
    (setq-default company-idle-delay            0) ; start completion immediately
    (setq-default company-minimum-prefix-length 1) ; start completion after 1 character.
    (setq-default company-tooltip-align-annotations t)
    (global-company-mode 1))
    (setq company-clang-executable "c:/Languages/LLVM/bin/clang.exe")
#+END_SRC

#+RESULTS:
: c:/Languages/LLVM/bin/clang.exe

** diff-hl
#+begin_src emacs-lisp
 (use-package diff-hl
   :ensure t
   :config
   (global-diff-hl-mode t)
   (diff-hl-flydiff-mode t)
   (diff-hl-margin-mode t)

   ;; Workaround for displaying correctly in other window
   (use-package frame
     :defer t
     :config
       (progn
        (setq window-divider-default-places 'right-only) ;Default 'right-only
          ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=27830#20
          ;; Workaround on emacs 26+ to prevent fringe truncation. You need to use
          ;; either scroll bars or window dividers to prevent that.
          ;; I dislike the default face of `window-divider', so I customize that in my
          ;; `smyx-theme`.
          (setq window-divider-default-right-width 1) ;Default 6
          (window-divider-mode 1))))

#+end_src

** diminish
#+begin_src emacs-lisp
 (use-package diminish
   :ensure t)
#+end_src
** dumb jump
#+begin_src emacs-lisp
 (use-package dumb-jump
   :ensure t)
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src
** go mode
#+begin_src emacs-lisp
 (use-package go-mode
   :ensure t)

 (use-package company-go
   :ensure t)
#+end_src

** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode))
#+end_src
** ido-vertical-mode
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config
      (ido-mode 1)
      (ido-vertical-mode 1))
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
     :config (ivy-mode 1))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)
#+end_src
** Org
  #+begin_src emacs-lisp
       (require 'org)
       (require 'ox-latex)
       (require 'compile)

       (add-to-list 'compilation-error-regexp-alist 'latex-warning)
       (add-to-list 'compilation-error-regexp-alist-alist
                     '(latex-warning
                       "\\(LaTeX.*? Warning:\\(.+\n\\)*\\)" 3 1))

       (add-to-list 'compilation-error-regexp-alist 'latex-error)
       (add-to-list 'compilation-error-regexp-alist-alist
                     '(latex-error
                     "\\(.*Error:\\(.+\n\\)*\\)" 1))

       (add-to-list 'compilation-error-regexp-alist 'latex-error2)
       (add-to-list 'compilation-error-regexp-alist-alist
                     '(latex-error2
                     "\\(^!\s.*\\)" 1))

       (setq org-latex-listings 'minted)
       (setq org-latex-pdf-process '("latexmk -pdf %f"))
       (setq org-default-notes-file "~/org/notes.org")
       (setq org-log-done 'time)
       (setq org-capture-templates
             (quote
              (("t" "Task" entry
                (file+headline "~/org/notes.org" "Tasks")
                "* TODO %?
      %i
      %a")
               ("s" "Schedule entry" entry
                (file+headline "~/org/notes.org" "Schedule")
                ""))))

       (setq org-default-notes-file "~/org/notes.org")
       (setq org-export-dispatch-use-expert-ui nil)
       (setq org-highlight-latex-and-related (quote (latex script entities)))
       (setq org-latex-caption-above nil)
       (setq org-latex-prefer-user-labels t)
       (setq org-latex-classes
             (quote
              (("scrreprt" "\\documentclass{scrreprt}"
                ("\\chapter{%s}"       . "\\chapter*{%s}")
                ("\\section{%s}"       . "\\section*{%s}")
                ("\\subsection{%s}"    . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))
               ("sig" "\\documentclass{sig-alternate}"
                ("\\section{%s}"       . "\\section*{%s}")
                ("\\subsection{%s}"    . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))
               ("article" "\\documentclass[11pt]{article}"
                ("\\section{%s}"       . "\\section*{%s}")
                ("\\subsection{%s}"    . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))
               ("report" "\\documentclass[11pt]{report}"
                ("\\part{%s}"          . "\\part*{%s}")
                ("\\chapter{%s}"       . "\\chapter*{%s}")
                ("\\section{%s}"       . "\\section*{%s}")
                ("\\subsection{%s}"    . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
               ("book" "\\documentclass[11pt]{book}"
                ("\\part{%s}"          . "\\part*{%s}")
                ("\\chapter{%s}"       . "\\chapter*{%s}")
                ("\\section{%s}"       . "\\section*{%s}")
                ("\\subsection{%s}"    . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))

       (setq org-latex-default-packages-alist
             (quote
              (("AUTO" "inputenc" t)
               ("T1" "fontenc" t)
               ("" "fixltx2e" nil)
               ("" "graphicx" t)
               ("" "grffile" t)
               ("" "longtable" nil)
               ("" "wrapfig" nil)
               ("" "rotating" nil)
               ("normalem" "ulem" t)
               ("" "amsmath" t)
               ("" "textcomp" t)
               ("" "amssymb" t)
               ("" "capt-of" nil))))

      (setq org-latex-hyperref-template nil)
      (setq org-latex-listings (quote minted))
      (setq org-src-fontify-natively t)
      (setq org-structure-template-alist
            (quote
             (("n" "#+begin_notes
    ?
    ,#+end_notes")
              ("s" "#+begin_src ?

    ,#+end_src")
              ("e" "#+begin_example
    ?
    ,#+end_example")
              ("q" "#+begin_quote
    ?
    ,#+end_quote")
              ("v" "#+begin_verse
    ?
    ,#+end_verse")
              ("V" "#+begin_verbatim
    ?
    ,#+end_verbatim")
              ("c" "#+begin_center
    ?
    ,#+end_center")
              ("C" "#+begin_comment
    ?
    ,#+end_comment")
              ("l" "#+begin_export latex
    ?
    ,#+end_export")
              ("L" "#+latex: ")
              ("h" "#+begin_export html
    ?
    ,#+end_export")
              ("H" "#+html: ")
              ("a" "#+begin_export ascii
    ?
    ,#+end_export")
              ("A" "#+ascii: ")
              ("i" "#+index: ?")
              ("I" "#+include: %file ?"))))



       (add-hook 'org-mode-hook (lambda ()
              (set-fill-column 100)
              (org-bullets-mode 1)
              (abbrev-mode 1)
              (auto-fill-mode 1)))

       (use-package org-bullets
         :ensure t)

       (use-package ox-reveal
         :ensure t)

       (use-package ox-twbs
         :ensure t)
#+end_src

#+RESULTS:

** solarized dark
#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-solarized
      :ensure t)
#+end_src
** powerline
#+begin_src emacs-lisp
  (use-package powerline
    :ensure t
    :config
      (powerline-default-theme))
#+end_src
** projectile
#+begin_src emacs-lisp
    (use-package projectile
       :ensure t
       :config
       (projectile-global-mode)
       (diminish 'projectile-mode))

     (use-package projectile-ripgrep
       :ensure t)
#+end_src

** rjsx
#+begin_src emacs-lisp
 (use-package rjsx-mode
   :ensure t
   :config
     (add-to-list 'auto-mode-alist '(".*\\.js\\'" . rjsx-mode))
     ;; Use space instead of tab
     (setq indent-tabs-mode nil)
     ;; disable the semicolon warning
     (setq js2-strict-missing-semi-warning nil))
#+end_src
** treemacs
#+begin_src emacs-lisp
 (use-package treemacs
   :ensure t
   :defer nil
   :init
   (with-eval-after-load 'winum
     (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
   :config
   (setq treemacs-change-root-without-asking nil
         treemacs-collapse-dirs              (if (executable-find "python") 3 0)
         treemacs-file-event-delay           100
         treemacs-follow-after-init          t
         treemacs-follow-recenter-distance   0.1
         treemacs-goto-tag-strategy          'refetch-index
         treemacs-indentation                2
         treemacs-indentation-string         " "
         treemacs-is-never-other-window      t
         treemacs-never-persist              nil
         treemacs-no-png-images              nil
         treemacs-recenter-after-file-follow nil
         treemacs-recenter-after-tag-follow  nil
         treemacs-show-hidden-files          t
         treemacs-silent-filewatch           nil
         treemacs-silent-refresh             t
         treemacs-sorting                    'alphabetic-desc
         treemacs-tag-follow-cleanup         t
         treemacs-tag-follow-delay           1.5
         treemacs-width                      35)

  ;;   ;; (treemacs-follow-mode t)
  ;;   ;; (treemacs-filewatch-mode t)
  ;;   ;; (treemacs-git-mode 'simple)

   :bind
   (:map global-map
         ([f8]         . treemacs-toggle)
         ("M-0"        . treemacs-select-window)
         ("C-x 1"      . treemacs-delete-other-windows)))

 (use-package treemacs-projectile
   :defer t
   :ensure t
   :config
   (setq treemacs-header-function #'treemacs-projectile-create-header))
  #+end_src
** wolfram
#+begin_src emacs-lisp
 (use-package wolfram
   :ensure t
   :config
     (setq wolfram-alpha-app-id "UX8T57-3WXAA24JHT"))
#+end_src
** wttrin
#+begin_src emacs-lisp
 (use-package wttrin
   :ensure t
   :config
   (setq wttrin-default-accept-language '("Accept-Language" . "de-DE")))
#+end_src
* UI customization
** Smoother scrolling
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil)            ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)                  ;; scroll window under mouse
  (setq scroll-step 1)                                ;; keyboard scroll one line at a time
  (setq scroll-conservatively 101)
#+END_SRC

** Long lines
#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
#+END_SRC

** Startup text
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message "\
  Unfortunately there is a radio connected to my brain.")
  ; (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq frame-title-format "%b - Emacs ")

#+END_SRC

** Cursor blink colors
#+BEGIN_SRC emacs-lisp
  (defvar blink-cursor-colors
     (list  "#92c48f" "#6785c5" "#be369c" "#d9ca65")
   ;; (list
   ;;     "#00FFF6"
   ;;     "#0099FF")
    "On each blink the cursor will cycle to the next color in this list.")

  (setq blink-cursor-count 0)
  (defun blink-cursor-timer-function ()
    "Zarza wrote this cyberpunk variant of timer `blink-cursor-timer'.
  Warning: overwrites original version in `frame.el'.

  This one changes the cursor color on each blink. Define colors in `blink-cursor-colors'."
    (when (not (internal-show-cursor-p))
      (when (>= blink-cursor-count (length blink-cursor-colors))
        (setq blink-cursor-count 0))
      (set-cursor-color (nth blink-cursor-count blink-cursor-colors))
      (setq blink-cursor-count (+ 1 blink-cursor-count))
      )
    (internal-show-cursor nil (not (internal-show-cursor-p))))

  (blink-cursor-mode)
#+END_SRC

#+RESULTS:
: t

** Transparient Background if not in focus
#+BEGIN_SRC emacs-lisp
 (set-frame-parameter (selected-frame) 'alpha '(100 . 96))
 (add-to-list 'default-frame-alist '(alpha . (100 . 96)))
 (defun transparency-toggle ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(100 . 96) '(100 . 96)))))
(transparency-toggle)
#+END_SRC
* Custom behavior
** garbage collection
#+begin_src emacs-lisp
(setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024)))
(run-with-idle-timer 2 t (lambda () (garbage-collect)))
#+end_src

** Backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs-saves")))

  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC
** compiling
#+BEGIN_SRC emacs-lisp
   (setq compilation-ask-about-save nil)
   (setq compilation-auto-jump-to-first-error nil)
   (setq compile-command "find_and_run.py build.bat")
   (setq compilation-read-command nil)
   (setq compilation-scroll-output t)
   ;; compilation in new frame
   ;; (setq special-display-buffer-names
   ;;      `(("*compilation*" . ((name . "*compilation*")
   ;;                            ,@default-frame-alist
   ;;                            (left . (- 1))
   ;;                            (top . 0)))))

   ;; (setq special-display-buffer-names
   ;;     `(("*Org PDF LaTeX Output*" . ((name . "*Org PDF LaTeX Output*")
   ;;                           ,@default-frame-alist
   ;;                           (left . (- 1))
   ;;                           (top . 0)))))
#+END_SRC

** format after yank
#+BEGIN_SRC emacs-lisp
(defadvice yank (around html-yank-indent)
  "Indents after yanking."
  (let ((point-before (point)))
    ad-do-it
      (indent-region point-before (point))))
(ad-activate 'yank)
#+END_SRC

** Global revert mode
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** isearch
#+BEGIN_SRC emacs-lisp
;; auto overwrap i-search
;; Prevents issue where you have to press backspace twice when
;; trying to remove the first character that fails a search
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)

(defadvice isearch-search (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)))


;; search for highlighted if exist
(defun jrh-isearch-with-region ()
  "Use region as the isearch text."
  (when mark-active
    (let ((region (funcall region-extract-function nil)))
      (deactivate-mark)
      (isearch-push-state)
      (isearch-yank-string region))))
(add-hook 'isearch-mode-hook #'jrh-isearch-with-region)
#+END_SRC

** No bell sound
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
      ring-bell-function #'ignore)
#+END_SRC

** no double space after sentence needed
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Org agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org"))
#+END_SRC
** Orgmode timestamp todo
#+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
#+END_SRC

** Overwrtite marked texed
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** Save hooks
Remove trailing whitespace
Tabs to spaces
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace-except-current-line)
  (defun untabify-except-makefiles ()
  "Replace tabs with spaces except in makefiles."
  (unless (derived-mode-p 'makefile-mode)
    (untabify (point-min) (point-max))))

  (add-hook 'before-save-hook 'untabify-except-makefiles)
#+END_SRC

** Save on buffer focus lost
#+BEGIN_SRC emacs-lisp
   (add-hook 'focus-out-hook          (lambda () (when (and buffer-file-name (buffer-modified-p)) (save-buffer))))
   (add-hook 'mouse-leave-buffer-hook (lambda () (when (and buffer-file-name (buffer-modified-p)) (save-buffer))))

    (defadvice switch-to-buffer (before save-buffer-now activate)
      (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
    (defadvice other-window (before other-window-now activate)
   (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
#+END_SRC

** simpler yes no dialoge
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Treat underscore as part of the word
#+BEGIN_SRC emacs-lisp
(modify-syntax-entry ?_ "w")
#+END_SRC

#+RESULTS:

** winner mode
#+BEGIN_SRC emacs-lisp
(require 'winner)
(winner-mode 1)
#+END_SRC

* Own Shortcuts
#+BEGIN_SRC emacs-lisp

  (global-unset-key (kbd "ESC ESC ESC"))
  (global-unset-key (kbd "<f2> <f2>"))

  (global-set-key (kbd "C-S-d") 'duplicate-line)

  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)


  (with-eval-after-load 'doc-view
    (define-key doc-view-mode-map (kbd "<C-wheel-up>") 'doc-view-enlarge)
    (define-key doc-view-mode-map (kbd "<C-wheel-down>") 'doc-view-shrink))


  (global-set-key (kbd "M-.") 'dumb-jump-go-set-mark)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (global-unset-key (kbd "C-<down-mouse-1>"))
  (global-set-key (kbd "C-<mouse-1>") 'mc/add-cursor-on-click)
  (define-key mc/keymap (kbd "<return>") nil)

  (global-set-key (kbd "C-c e") 'save-and-find-build-script-and-compile)

  (global-set-key (kbd "C-z") 'winner-undo)
  (global-unset-key "\C-d")
  (global-set-key (kbd "C-j") 'join-line)


  ;; Multi cursor
  (define-key rjsx-mode-map (kbd "C-d") 'mark-word-or-next-word-like-this) ;; rjsx-mode
  (define-key java-mode-map (kbd "C-d") 'mark-word-or-next-word-like-this) ;; rjsx-mode

  (global-set-key (kbd "C-d") 'mark-word-or-next-word-like-this)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C-c i") 'find-user-init-file)

  ;; Open specific files / buffers
  (global-set-key (kbd "C-c t") 'find-org-capture-file)
  (global-set-key (kbd "C-c T") 'projectile-find-todos)
  (global-set-key (kbd "C-#") 'comment-line)

  ;; Move lines
  (global-set-key [M-up]   'move-lines-up)
  (global-set-key [M-down] 'move-lines-down)

  ;; projectile
  (global-set-key (kbd "C-c p s r") 'projectile-ripgrep)


  ;; org
  ;; (define-key org-mode-map (kbd "C-c e") 'save-and-export-to-pdf)
  ;; (define-key org-mode-map (kbd "C-c r") 'save-and-export-to-reavealjs)
  (define-key org-mode-map (kbd "C-#") 'comment-line)
  (define-key org-mode-map [M-up]   'move-lines-up)
  (define-key org-mode-map [M-down] 'move-lines-down)
  (define-key org-mode-map (kbd "C-j") 'join-line)

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+RESULTS:
: org-capture

* Own functions
** duplicate lines
#+begin_src emacs-lisp
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line 1)
    (yank)
    (yank)
    (forward-line -1)
  )
#+end_src

#+RESULTS:
: duplicate-line

** set Mark and dumb jump go
#+begin_src emacs-lisp
  (defun dumb-jump-go-set-mark ()
     "Sets a mark and dumb jumps."
     (interactive)
     (kbd "C-SPC C-SPC")
     (dumb-jump-go nil))
#+end_src

#+RESULTS:
: dumb-jump-go-set-mark

** Find TODOs in projectile
#+begin_src emacs-lisp
 (defun projectile-find-todos ()
    "find TODOS in the project."
    (interactive)
    (ripgrep-regexp find-todo-regex (projectile-project-root)))
#+end_src

** find build script and compile
#+begin_src emacs-lisp
  (defun save-and-find-build-script-and-compile ()
    "Walks upward the directory tree until a buildscript is found"
    (interactive)
    (save-buffer)
    (let* ((build-script-path (locate-dominating-file (expand-file-name default-directory) build-script-name)))
        (if build-script-path (progn
            (setq compile-command (concat build-script-path build-script-name))
            (compile compile-command))
          (error (concat "The default buildscript '" build-script-name "' cannot be found"))
        )
     )
  )
#+end_src

** move lines and regions
#+BEGIN_SRC emacs-lisp
  (defun move-lines (n)
    (let ((beg) (end) (keep))
      (if mark-active
          (save-excursion
            (setq keep t)
            (setq beg (region-beginning)
                  end (region-end))
            (goto-char beg)
            (setq beg (line-beginning-position))
            (goto-char end)
            (setq end (line-beginning-position 2)))
        (setq beg (line-beginning-position)
              end (line-beginning-position 2)))
      (let ((offset (if (and (mark t)
                             (and (>= (mark t) beg)
                                  (< (mark t) end)))
                        (- (point) (mark t))))
            (rewind (- end (point))))
        (goto-char (if (< n 0) beg end))
        (forward-line n)
        (insert (delete-and-extract-region beg end))
        (backward-char rewind)
        (if offset (set-mark (- (point) offset))))
      (if keep
          (setq mark-active t
                deactivate-mark nil))))

  (defun move-lines-up (n)
    "move the line(s) spanned by the active region up by N lines."
    (interactive "*p")
    (move-lines (- (or n 1))))

  (defun move-lines-down (n)
    "move the line(s) spanned by the active region down by N lines."
    (interactive "*p")
    (move-lines (or n 1)))
#+END_SRC

** open important files
#+BEGIN_SRC emacs-lisp
  (defun find-user-init-file ()
    "Edit the `init.org', in another window."
    (interactive)
    (find-file-other-window "~/.emacs.d/emacs-init.org"))

  (defun find-org-capture-file ()
    "Edit the org capture file, in another window."
    (interactive)
    (find-file-other-window org-default-notes-file))
#+END_SRC

** open explorer here
#+begin_src emacs-lisp
(defun browse-file-directory ()
  "Open the current file's directory however the OS would."
  (interactive)
  (if default-directory
      (browse-url-of-file (expand-file-name default-directory))
    (error "No `default-directory' to open")))
#+end_src
** Delete whitepsace except current line
#+BEGIN_SRC emacs-lisp
(defun delete-trailing-whitespace-except-current-line ()
  (interactive)
  (let ((begin (line-beginning-position))
        (end (line-end-position)))
    (save-excursion
      (when (< (point-min) begin)
        (save-restriction
          (narrow-to-region (point-min) (1- begin))
          (delete-trailing-whitespace)))
      (when (> (point-max) end)
        (save-restriction
          (narrow-to-region (1+ end) (point-max))
          (delete-trailing-whitespace))))))
#+END_SRC
** Save the file and org export
#+BEGIN_SRC emacs-lisp
    (defun save-and-export-to-pdf ()
      "Save the buffer and then latex export to pdf."
      (interactive)
      (save-buffer)
      (org-latex-export-to-pdf)
      ;; (switch-to-buffer-other-window "*Org PDF LaTeX Output*")
      ;; (compilation-mode)
  )

    (defun save-and-export-to-reavealjs ()
      "Save the buffer and then latex export to reavealjs slides."
      (interactive)
      (save-buffer)
      (org-reveal-export-to-html-and-browse))

#+END_SRC

#+RESULTS:
: save-and-export-to-reavealjs

** Mark current word
#+BEGIN_SRC emacs-lisp
  (defun mark-current-word (&optional arg allow-extend)
    "Put point at beginning of current word, set mark at end."
    (interactive "p\np")
    (setq arg (if arg arg 1))
    (if (and allow-extend
             (or (and (eq last-command this-command) (mark t))
                 (region-active-p)))
        (set-mark
         (save-excursion
           (when (< (mark) (point))
             (setq arg (- arg)))
           (goto-char (mark))
           (forward-word arg)
           (point)))
      (let ((wbounds (bounds-of-thing-at-point 'word)))
        (unless (consp wbounds)
          (error "No word at point"))
        (if (>= arg 0)
            (goto-char (car wbounds))
          (goto-char (cdr wbounds)))
        (push-mark (save-excursion
                     (forward-word arg)
                     (point)))
        (activate-mark))))
#+END_SRC

** Mark word or next word like this
#+BEGIN_SRC emacs-lisp
  (defun mark-word-or-next-word-like-this ()
    "if there is no active region the word under
     the point will be marked, otherwise the next word is selected."
    (interactive)
    (if (region-active-p)
    ;; then
      (progn
        (mc/mark-more-like-this nil 'forwards)
        (mc/maybe-multiple-cursors-mode)
        (mc/cycle-forward))
    ;; else
      (mc--select-thing-at-point 'word)))
#+END_SRC

#+RESULTS:
: mark-word-or-next-word-like-this

* Mode specifics
** compilation
#+begin_src emacs-lisp
  (setq compilation-finish-functions
     (lambda (buf str)
        (if (string= "finished\n" str)
           (progn
              (run-at-time "0.2 sec" nil
                 (lambda ()
                    (setq inhibit-message 1)
                    (winner-undo)
                    (setq inhibit-message nil)
                 )
              )
           )
        )
     )
  )
#+end_src

#+RESULTS:
| lambda | (buf str) | (if (string= finished |

only show compilatoin buffer on error
#+begin_src
; called at end of compilation
(defun my-compile-switch (buf s)
(when (not (string= s "finished\n"))
(display-buffer buf)))

(add-to-list 'compilation-finish-functions 'my-compile-switch)

; kill current process yes-or-no-p => t (always kill process)
; commented display-buffer call & sexp using outwin var
(defun compilation-start (command &optional mode name-function highlight-regexp)
"Run compilation command COMMAND (low level interface).
If COMMAND starts with a cd command, that becomes the `default-directory'.
The rest of the arguments are optional; for them, nil means use the default.

MODE is the major mode to set in the compilation buffer.  Mode
may also be t meaning use `compilation-shell-minor-mode' under `comint-mode'.

If NAME-FUNCTION is non-nil, call it with one argument (the mode name)
to determine the buffer name.  Otherwise, the default is to
reuses the current buffer if it has the proper major mode,
else use or create a buffer with name based on the major mode.

If HIGHLIGHT-REGEXP is non-nil, `next-error' will temporarily highlight
the matching section of the visited source line; the default is to use the
global value of `compilation-highlight-regexp'.

Returns the compilation buffer created."
(or mode (setq mode 'compilation-mode))
(let* ((name-of-mode
(if (eq mode t)
"compilation"
(replace-regexp-in-string "-mode$" "" (symbol-name mode))))
(thisdir default-directory)
outwin outbuf)
(with-current-buffer
(setq outbuf
(get-buffer-create
(compilation-buffer-name name-of-mode mode name-function)))
(let ((comp-proc (get-buffer-process (current-buffer))))
(if comp-proc
(if (or (not (eq (process-status comp-proc) 'run))
t)
(condition-case ()
(progn
(interrupt-process comp-proc)
(sit-for 1)
(delete-process comp-proc))
(error nil))
(error "Cannot have two processes in `%s' at once"
(buffer-name)))))
;; first transfer directory from where M-x compile was called
(setq default-directory thisdir)
;; Make compilation buffer read-only.  The filter can still write it.
;; Clear out the compilation buffer.
(let ((inhibit-read-only t)
(default-directory thisdir))
;; Then evaluate a cd command if any, but don't perform it yet, else
;; start-command would do it again through the shell: (cd "..") AND
;; sh -c "cd ..; make"
(cd (if (string-match "^\\s *cd\\(?:\\s +\\(\\S +?\\)\\)?\\s *[;&\n]"
command)
(if (match-end 1)
(substitute-env-vars (match-string 1 command))
"~")
default-directory))
(erase-buffer)
;; Select the desired mode.
(if (not (eq mode t))
(progn
(buffer-disable-undo)
(funcall mode))
(setq buffer-read-only nil)
(with-no-warnings (comint-mode))
(compilation-shell-minor-mode))
;; Remember the original dir, so we can use it when we recompile.
;; default-directory' can't be used reliably for that because it may be
;; affected by the special handling of "cd ...;".
;; NB: must be fone after (funcall mode) as that resets local variables
(set (make-local-variable 'compilation-directory) thisdir)
(if highlight-regexp
(set (make-local-variable 'compilation-highlight-regexp)
highlight-regexp))
(if (or compilation-auto-jump-to-first-error
(eq compilation-scroll-output 'first-error))
(set (make-local-variable 'compilation-auto-jump-to-next) t))
;; Output a mode setter, for saving and later reloading this buffer.
(insert "-*- mode: " name-of-mode
"; default-directory: " (prin1-to-string default-directory)
" -*-\n"
(format "%s started at %s\n\n"
mode-name
(substring (current-time-string) 0 19))
command "\n")
(setq thisdir default-directory))
(set-buffer-modified-p nil))
;; Pop up the compilation buffer.
;; http://lists.gnu.org/archive/html/emacs-devel/2007-11/msg01638.html
;   (setq outwin (display-buffer outbuf))
(with-current-buffer outbuf
(let ((process-environment
(append
compilation-environment
(if (if (boundp 'system-uses-terminfo) ; `if' for compiler warning
system-uses-terminfo)
(list "TERM=dumb" "TERMCAP="
(format "COLUMNS=%d" (window-width)))
(list "TERM=emacs"
(format "TERMCAP=emacs:co#%d:tc=unknown:"
(window-width))))
;; Set the EMACS variable, but
;; don't override users' setting of $EMACS.
(unless (getenv "EMACS")
(list "EMACS=t"))
(list "INSIDE_EMACS=t")
(copy-sequence process-environment))))
(set (make-local-variable 'compilation-arguments)
(list command mode name-function highlight-regexp))
(set (make-local-variable 'revert-buffer-function)
'compilation-revert-buffer)
;       (set-window-start outwin (point-min))

;; Position point as the user will see it.
(let ((desired-visible-point
;; Put it at the end if `compilation-scroll-output' is set.
(if compilation-scroll-output
(point-max)
;; Normally put it at the top.
(point-min))))
;         (if (eq outwin (selected-window))
;             (goto-char desired-visible-point)
;           (set-window-point outwin desired-visible-point))
)

;; The setup function is called before compilation-set-window-height
;; so it can set the compilation-window-height buffer locally.
(if compilation-process-setup-function
(funcall compilation-process-setup-function))
;       (compilation-set-window-height outwin)
;; Start the compilation.
(if (fboundp 'start-process)
(let ((proc
(if (eq mode t)
;; comint uses `start-file-process'.
(get-buffer-process
(with-no-warnings
(comint-exec
outbuf (downcase mode-name)
(if (file-remote-p default-directory)
"/bin/sh"
shell-file-name)
nil `("-c" ,command))))
(start-file-process-shell-command (downcase mode-name)
outbuf command))))
;; Make the buffer's mode line show process state.
(setq mode-line-process
(list (propertize ":%s" 'face 'compilation-warning)))
(set-process-sentinel proc 'compilation-sentinel)
(unless (eq mode t)
;; Keep the comint filter, since it's needed for proper handling
;; of the prompts.
(set-process-filter proc 'compilation-filter))
;; Use (point-max) here so that output comes in
;; after the initial text,
;; regardless of where the user sees point.
(set-marker (process-mark proc) (point-max) outbuf)
(when compilation-disable-input
(condition-case nil
(process-send-eof proc)
;; The process may have exited already.
(error nil)))
(run-hook-with-args 'compilation-start-hook proc)
(setq compilation-in-progress
(cons proc compilation-in-progress)))
;; No asynchronous processes available.
(message "Executing `%s'..." command)
;; Fake modeline display as if `start-process' were run.
(setq mode-line-process
(list (propertize ":run" 'face 'compilation-warning)))
(force-mode-line-update)
(sit-for 0)                   ; Force redisplay
(save-excursion
;; Insert the output at the end, after the initial text,
;; regardless of where the user sees point.
(goto-char (point-max))
(let* ((buffer-read-only nil) ; call-process needs to modify outbuf
(status (call-process shell-file-name nil outbuf nil "-c"
command)))
(cond ((numberp status)
(compilation-handle-exit
'exit status
(if (zerop status)
"finished\n"
(format "exited abnormally with code %d\n" status))))
((stringp status)
(compilation-handle-exit 'signal status
(concat status "\n")))
(t
(compilation-handle-exit 'bizarre status status)))))
;; Without async subprocesses, the buffer is not yet
;; fontified, so fontify it now.
(let ((font-lock-verbose nil)) ; shut up font-lock messages
(font-lock-fontify-buffer))
(set-buffer-modified-p nil)
(message "Executing `%s'...done" command)))
;; Now finally cd to where the shell started make/grep/...
(setq default-directory thisdir)
;; The following form selected outwin ever since revision 1.183,
;; so possibly messing up point in some other window (bug#1073).
;; Moved into the scope of with-current-buffer, though still with
;; complete disregard for the case when compilation-scroll-output
;; equals 'first-error (martin 2008-10-04).
(when compilation-scroll-output
(goto-char (point-max))))

;; Make it so the next C-x ` will use this buffer.
(setq next-error-last-buffer outbuf)))
#+end_src

#+RESULTS:
: compilation-start

** go
#+begin_src emacs-lisp
   (add-hook 'go-mode-hook (lambda ()
     (set (make-local-variable 'company-backends) '(company-go))
     (company-mode)
     (add-hook 'before-save-hook 'gofmt-before-save)
     (setq tab-width 4)
     (setq indent-tabs-mode 1)))
#+end_src

#+RESULTS:
| lambda | nil | (set (make-local-variable (quote company-backends)) (quote (company-go))) | (company-mode) | (add-hook (quote before-save-hook) (quote gofmt-before-save)) | (setq tab-width 4) | (setq indent-tabs-mode 1) |
| lambda | nil | (set (make-local-variable (quote company-backends)) (quote (company-go))) | (company-mode) |                                                               |                    |                           |

** C/C++
   #+begin_src emacs-lisp

      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

        (add-hook 'c++-mode-hook (
            lambda()
               (c-set-style "awk")
               (c-set-offset 'inlambda 0)
               (abbrev-mode -1)
               (define-key c++-mode-map (kbd "C-d") nil)
               (flycheck-mode 1)
        ))

        (add-hook 'c-mode-hook (
            lambda()
               (c-set-style "awk")
               (c-set-offset 'inlambda 0)
               (abbrev-mode -1)
               (define-key c-mode-map (kbd "C-d") nil)
               (flycheck-mode 1)
        ))

   #+end_src

   #+RESULTS:
   | lambda | nil | (c-set-style awk) | (c-set-offset (quote inlambda) 0) | (abbrev-mode -1) | (define-key c-mode-map (kbd C-d) nil) | (flycheck-mode 1) |

** DocViewMode (PDF)
#+BEGIN_SRC emacs-lisp
(add-hook 'doc-view-mode-hook (
  lambda ()
    (auto-revert-mode)
    (setq doc-view-continuous t)
  ))
#+END_SRC

* Text Snippets
** build scripts
#+begin_src emacs-lisp
  (require 'ido)

  (defun insert-build-script()
    "Prompt user to pick a build script to insert."
    (interactive)

    (let ((choices-alist '(("cl.exe" . "@echo off
pushd %~dp0

set exeName=main.exe
set binDir=bin

mkdir quickbuild
pushd quickbuild

cl^
   ../src/*.cpp^
   /Fe%exeName% /MP /openmp /W3 /std:c++latest^
   /nologo /EHsc /Z7^
   /link /incremental /debug:fastlink

if %errorlevel% == 0 (
   echo.
   if not exist ..\\%binDir% mkdir ..\\%binDir%
   move %exeName% ..\\%binDir%\\ > NUL
   pushd ..\\%binDir%
  echo ---------- Output start ----------
   %exeName%
   echo ---------- Output   end ----------
   del %exeName% /S /Q > NUL
   popd
) else (
  echo.
  echo Fucki'n 'ell
)

popd
rd quickbuild /S /Q
popd") ("generic" . "@echo off
pushd %~dp0

build
run

popd") ("python" . "@echo off
pushd %~dp0

python filename.py

popd") ("go" . "@echo off

set mainFileName=main

pushd %~dp0

go build %mainFileName%.go

if %errorlevel% == 0 (
   echo.

   echo ---------- Output start ----------
   %mainFileName%
   echo ---------- Output   end ----------

) else (
  echo.
  echo Fucki'n 'ell
)

popd") ("org-mode" . "@echo off
pushd %~dp0

set fileName=\"Ausarbeitung\"
set pdfTempDir=\"temp_pdf\"

emacsclient -c ^
 -e \"(progn (require 'org) (find-file-other-window \\\"%fileName%.org\\\") (org-latex-export-to-latex) (save-buffers-kill-terminal))\"

echo.
echo ================================================
echo               Tex Export Finished
echo ================================================
echo.

if %errorlevel% == 0 (
    if not exist %pdfTempDir% (
        mkdir %pdfTempDir%
    ) else (
        call :copyfilesin
    )

    latexmk -Werror -pdf -shell-escape %fileName%.tex && (
        call :cleanup
        goto :success
    ) || (
        echo Errors converting to pdf ㅠㅠ
        call :cleanup
        goto :fail
    )
) else (
    echo Errors converting to tex ㅠㅠ
    goto:fail
)

:copyfilesin
for /f \"usebackq\" %%m in (`dir /b %pdfTempDir%\\*minted*`) do (
    move \"%pdfTempDir%\\%%m\" \"%%m\" > NUL
)
move %pdfTempDir%\\*.aux .\\ > NUL
move %pdfTempDir%\\*.bbl .\\ > NUL
move %pdfTempDir%\\*.blg .\\ > NUL
move %pdfTempDir%\\*.fdb_latexmk .\\ > NUL
move %pdfTempDir%\\*.fls .\\ > NUL
move %pdfTempDir%\\*.log .\\ > NUL
move %pdfTempDir%\\*.out .\\ > NUL
move %pdfTempDir%\\*.toc .\\ > NUL
goto :eof

:cleanup
for /f \"usebackq\" %%m in (`dir /b *minted*`) do (
    move \"%%m\" \"%pdfTempDir%\\%%m\" > NUL
)
move *.aux %pdfTempDir%\\ > NUL
move *.bbl %pdfTempDir%\\ > NUL
move *.blg %pdfTempDir%\\ > NUL
move *.fdb_latexmk %pdfTempDir%\\ > NUL
move *.fls %pdfTempDir%\\ > NUL
move *.log %pdfTempDir%\\ > NUL
move *.out %pdfTempDir%\\ > NUL
move *.toc %pdfTempDir%\\ > NUL
goto :eof

:success
popd
echo yey
exit 0

:fail
popd
exit 1")

)))

      (let ((choice (ido-completing-read "Insert build script for:" (mapcar #'car choices-alist))))
        (insert (alist-get choice choices-alist)))))
#+end_src

* Delayed execution
** modeline cleanup
#+begin_src emacs-lisp
  (setcar (cdr (assq 'ivy-mode minor-mode-alist)) "")
  (setcar (cdr (assq 'abbrev-mode minor-mode-alist)) "")
  (setcar (cdr (assq 'auto-fill-function minor-mode-alist)) "")
#+end_src
